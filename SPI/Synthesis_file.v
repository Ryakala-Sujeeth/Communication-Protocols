/* Generated by Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 16.0.6 -fPIC -O3) */

(* src = "Master.v:23.1-82.10" *)
module Master(clk, rst, start, data_in, sclk, mosi, miso, ss, data_out, done);
  (* src = "Master.v:43.5-81.8" *)
  wire [4:0] _000_;
  (* src = "Master.v:43.5-81.8" *)
  wire [7:0] _001_;
  (* src = "Master.v:43.5-81.8" *)
  wire _002_;
  (* src = "Master.v:43.5-81.8" *)
  wire _003_;
  (* src = "Master.v:43.5-81.8" *)
  wire [15:0] _004_;
  (* src = "Master.v:43.5-81.8" *)
  wire _005_;
  (* src = "Master.v:43.5-81.8" *)
  wire [16:0] _006_;
  (* src = "Master.v:43.5-81.8" *)
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  (* src = "Master.v:36.15-36.22" *)
  wire [4:0] bit_cnt;
  (* src = "Master.v:24.16-24.19" *)
  input clk;
  wire clk;
  (* src = "Master.v:39.15-39.22" *)
  wire [7:0] clk_div;
  (* src = "Master.v:27.23-27.30" *)
  input [15:0] data_in;
  wire [15:0] data_in;
  (* src = "Master.v:32.23-32.31" *)
  output [15:0] data_out;
  wire [15:0] data_out;
  (* src = "Master.v:33.16-33.20" *)
  output done;
  wire done;
  (* src = "Master.v:30.16-30.20" *)
  input miso;
  wire miso;
  (* src = "Master.v:29.16-29.20" *)
  output mosi;
  wire mosi;
  (* src = "Master.v:25.16-25.19" *)
  input rst;
  wire rst;
  (* src = "Master.v:38.16-38.22" *)
  wire [15:0] rx_reg;
  (* src = "Master.v:28.16-28.20" *)
  output sclk;
  wire sclk;
  (* src = "Master.v:37.16-37.25" *)
  reg [16:0] shift_reg;
  (* src = "Master.v:31.16-31.18" *)
  output ss;
  wire ss;
  (* src = "Master.v:26.16-26.21" *)
  input start;
  wire start;
  INV_X1 _139_ (
    .A(clk_div[5]),
    .ZN(_059_)
  );
  INV_X1 _140_ (
    .A(clk_div[0]),
    .ZN(_060_)
  );
  INV_X1 _141_ (
    .A(bit_cnt[3]),
    .ZN(_061_)
  );
  INV_X1 _142_ (
    .A(bit_cnt[2]),
    .ZN(_062_)
  );
  INV_X1 _143_ (
    .A(bit_cnt[1]),
    .ZN(_063_)
  );
  INV_X1 _144_ (
    .A(rst),
    .ZN(_026_)
  );
  INV_X1 _145_ (
    .A(done),
    .ZN(_064_)
  );
  INV_X1 _146_ (
    .A(ss),
    .ZN(_065_)
  );
  NOR3_X1 _147_ (
    .A1(bit_cnt[2]),
    .A2(bit_cnt[1]),
    .A3(bit_cnt[0]),
    .ZN(_066_)
  );
  NAND3_X1 _148_ (
    .A1(bit_cnt[4]),
    .A2(_061_),
    .A3(_066_),
    .ZN(_067_)
  );
  AND2_X1 _149_ (
    .A1(start),
    .A2(_008_),
    .ZN(_068_)
  );
  NAND2_X1 _150_ (
    .A1(start),
    .A2(_008_),
    .ZN(_069_)
  );
  NOR2_X1 _151_ (
    .A1(clk_div[6]),
    .A2(clk_div[5]),
    .ZN(_070_)
  );
  NOR4_X1 _152_ (
    .A1(clk_div[3]),
    .A2(clk_div[2]),
    .A3(clk_div[1]),
    .A4(_060_),
    .ZN(_071_)
  );
  OR2_X1 _153_ (
    .A1(clk_div[7]),
    .A2(clk_div[4]),
    .ZN(_072_)
  );
  NOR2_X1 _154_ (
    .A1(_069_),
    .A2(_072_),
    .ZN(_073_)
  );
  NAND3_X1 _155_ (
    .A1(_070_),
    .A2(_071_),
    .A3(_073_),
    .ZN(_074_)
  );
  NAND4_X1 _156_ (
    .A1(sclk),
    .A2(_070_),
    .A3(_071_),
    .A4(_073_),
    .ZN(_075_)
  );
  OR2_X1 _157_ (
    .A1(_067_),
    .A2(_075_),
    .ZN(_076_)
  );
  NOR3_X1 _158_ (
    .A1(rst),
    .A2(_067_),
    .A3(_075_),
    .ZN(_077_)
  );
  NOR4_X1 _159_ (
    .A1(clk_div[6]),
    .A2(clk_div[5]),
    .A3(clk_div[1]),
    .A4(_069_),
    .ZN(_078_)
  );
  NOR4_X1 _160_ (
    .A1(clk_div[3]),
    .A2(clk_div[2]),
    .A3(_060_),
    .A4(_072_),
    .ZN(_079_)
  );
  MUX2_X1 _161_ (
    .A(data_out[14]),
    .B(rx_reg[14]),
    .S(_077_),
    .Z(_015_)
  );
  MUX2_X1 _162_ (
    .A(data_out[13]),
    .B(rx_reg[13]),
    .S(_077_),
    .Z(_014_)
  );
  MUX2_X1 _163_ (
    .A(data_out[12]),
    .B(rx_reg[12]),
    .S(_077_),
    .Z(_013_)
  );
  MUX2_X1 _164_ (
    .A(data_out[11]),
    .B(rx_reg[11]),
    .S(_077_),
    .Z(_012_)
  );
  MUX2_X1 _165_ (
    .A(data_out[10]),
    .B(rx_reg[10]),
    .S(_077_),
    .Z(_011_)
  );
  MUX2_X1 _166_ (
    .A(data_out[9]),
    .B(rx_reg[9]),
    .S(_077_),
    .Z(_025_)
  );
  MUX2_X1 _167_ (
    .A(data_out[8]),
    .B(rx_reg[8]),
    .S(_077_),
    .Z(_024_)
  );
  MUX2_X1 _168_ (
    .A(data_out[7]),
    .B(rx_reg[7]),
    .S(_077_),
    .Z(_023_)
  );
  MUX2_X1 _169_ (
    .A(data_out[6]),
    .B(rx_reg[6]),
    .S(_077_),
    .Z(_022_)
  );
  MUX2_X1 _170_ (
    .A(data_out[5]),
    .B(rx_reg[5]),
    .S(_077_),
    .Z(_021_)
  );
  MUX2_X1 _171_ (
    .A(data_out[4]),
    .B(rx_reg[4]),
    .S(_077_),
    .Z(_020_)
  );
  MUX2_X1 _172_ (
    .A(data_out[3]),
    .B(rx_reg[3]),
    .S(_077_),
    .Z(_019_)
  );
  MUX2_X1 _173_ (
    .A(data_out[2]),
    .B(rx_reg[2]),
    .S(_077_),
    .Z(_018_)
  );
  MUX2_X1 _174_ (
    .A(data_out[1]),
    .B(rx_reg[1]),
    .S(_077_),
    .Z(_017_)
  );
  MUX2_X1 _175_ (
    .A(data_out[0]),
    .B(rx_reg[0]),
    .S(_077_),
    .Z(_010_)
  );
  NAND4_X1 _176_ (
    .A1(bit_cnt[0]),
    .A2(sclk),
    .A3(_078_),
    .A4(_079_),
    .ZN(_080_)
  );
  NOR2_X1 _177_ (
    .A1(_063_),
    .A2(_080_),
    .ZN(_081_)
  );
  NOR3_X1 _178_ (
    .A1(_062_),
    .A2(_063_),
    .A3(_080_),
    .ZN(_082_)
  );
  NOR4_X1 _179_ (
    .A1(_061_),
    .A2(_062_),
    .A3(_063_),
    .A4(_080_),
    .ZN(_083_)
  );
  XNOR2_X1 _180_ (
    .A(_061_),
    .B(_082_),
    .ZN(_000_[3])
  );
  XNOR2_X1 _181_ (
    .A(_062_),
    .B(_081_),
    .ZN(_000_[2])
  );
  XNOR2_X1 _182_ (
    .A(bit_cnt[1]),
    .B(_080_),
    .ZN(_000_[1])
  );
  XNOR2_X1 _183_ (
    .A(bit_cnt[0]),
    .B(_075_),
    .ZN(_000_[0])
  );
  OR2_X1 _184_ (
    .A1(sclk),
    .A2(_074_),
    .ZN(_084_)
  );
  MUX2_X1 _185_ (
    .A(shift_reg[14]),
    .B(shift_reg[15]),
    .S(_084_),
    .Z(_006_[15])
  );
  MUX2_X1 _186_ (
    .A(shift_reg[13]),
    .B(shift_reg[14]),
    .S(_084_),
    .Z(_006_[14])
  );
  MUX2_X1 _187_ (
    .A(shift_reg[12]),
    .B(shift_reg[13]),
    .S(_084_),
    .Z(_006_[13])
  );
  MUX2_X1 _188_ (
    .A(shift_reg[11]),
    .B(shift_reg[12]),
    .S(_084_),
    .Z(_006_[12])
  );
  MUX2_X1 _189_ (
    .A(shift_reg[10]),
    .B(shift_reg[11]),
    .S(_084_),
    .Z(_006_[11])
  );
  MUX2_X1 _190_ (
    .A(shift_reg[9]),
    .B(shift_reg[10]),
    .S(_084_),
    .Z(_006_[10])
  );
  MUX2_X1 _191_ (
    .A(shift_reg[8]),
    .B(shift_reg[9]),
    .S(_084_),
    .Z(_006_[9])
  );
  MUX2_X1 _192_ (
    .A(shift_reg[7]),
    .B(shift_reg[8]),
    .S(_084_),
    .Z(_006_[8])
  );
  MUX2_X1 _193_ (
    .A(shift_reg[6]),
    .B(shift_reg[7]),
    .S(_084_),
    .Z(_006_[7])
  );
  MUX2_X1 _194_ (
    .A(shift_reg[5]),
    .B(shift_reg[6]),
    .S(_084_),
    .Z(_006_[6])
  );
  MUX2_X1 _195_ (
    .A(shift_reg[4]),
    .B(shift_reg[5]),
    .S(_084_),
    .Z(_006_[5])
  );
  MUX2_X1 _196_ (
    .A(shift_reg[3]),
    .B(shift_reg[4]),
    .S(_084_),
    .Z(_006_[4])
  );
  MUX2_X1 _197_ (
    .A(shift_reg[2]),
    .B(shift_reg[3]),
    .S(_084_),
    .Z(_006_[3])
  );
  MUX2_X1 _198_ (
    .A(shift_reg[1]),
    .B(shift_reg[2]),
    .S(_084_),
    .Z(_006_[2])
  );
  MUX2_X1 _199_ (
    .A(shift_reg[0]),
    .B(shift_reg[1]),
    .S(_084_),
    .Z(_006_[1])
  );
  AND2_X1 _200_ (
    .A1(shift_reg[0]),
    .A2(_084_),
    .ZN(_006_[0])
  );
  MUX2_X1 _201_ (
    .A(rx_reg[13]),
    .B(rx_reg[14]),
    .S(_075_),
    .Z(_004_[14])
  );
  MUX2_X1 _202_ (
    .A(rx_reg[12]),
    .B(rx_reg[13]),
    .S(_075_),
    .Z(_004_[13])
  );
  MUX2_X1 _203_ (
    .A(rx_reg[11]),
    .B(rx_reg[12]),
    .S(_075_),
    .Z(_004_[12])
  );
  MUX2_X1 _204_ (
    .A(rx_reg[10]),
    .B(rx_reg[11]),
    .S(_075_),
    .Z(_004_[11])
  );
  MUX2_X1 _205_ (
    .A(rx_reg[9]),
    .B(rx_reg[10]),
    .S(_075_),
    .Z(_004_[10])
  );
  MUX2_X1 _206_ (
    .A(rx_reg[8]),
    .B(rx_reg[9]),
    .S(_075_),
    .Z(_004_[9])
  );
  MUX2_X1 _207_ (
    .A(rx_reg[7]),
    .B(rx_reg[8]),
    .S(_075_),
    .Z(_004_[8])
  );
  MUX2_X1 _208_ (
    .A(rx_reg[6]),
    .B(rx_reg[7]),
    .S(_075_),
    .Z(_004_[7])
  );
  MUX2_X1 _209_ (
    .A(rx_reg[5]),
    .B(rx_reg[6]),
    .S(_075_),
    .Z(_004_[6])
  );
  MUX2_X1 _210_ (
    .A(rx_reg[4]),
    .B(rx_reg[5]),
    .S(_075_),
    .Z(_004_[5])
  );
  MUX2_X1 _211_ (
    .A(rx_reg[3]),
    .B(rx_reg[4]),
    .S(_075_),
    .Z(_004_[4])
  );
  MUX2_X1 _212_ (
    .A(rx_reg[2]),
    .B(rx_reg[3]),
    .S(_075_),
    .Z(_004_[3])
  );
  MUX2_X1 _213_ (
    .A(rx_reg[1]),
    .B(rx_reg[2]),
    .S(_075_),
    .Z(_004_[2])
  );
  MUX2_X1 _214_ (
    .A(rx_reg[0]),
    .B(rx_reg[1]),
    .S(_075_),
    .Z(_004_[1])
  );
  MUX2_X1 _215_ (
    .A(miso),
    .B(rx_reg[0]),
    .S(_075_),
    .Z(_004_[0])
  );
  AND4_X1 _216_ (
    .A1(clk_div[1]),
    .A2(clk_div[0]),
    .A3(start),
    .A4(_008_),
    .ZN(_085_)
  );
  NAND2_X1 _217_ (
    .A1(clk_div[2]),
    .A2(_085_),
    .ZN(_086_)
  );
  NAND3_X1 _218_ (
    .A1(clk_div[3]),
    .A2(clk_div[2]),
    .A3(_085_),
    .ZN(_087_)
  );
  NAND4_X1 _219_ (
    .A1(clk_div[4]),
    .A2(clk_div[3]),
    .A3(clk_div[2]),
    .A4(_085_),
    .ZN(_088_)
  );
  NOR2_X1 _220_ (
    .A1(_059_),
    .A2(_088_),
    .ZN(_089_)
  );
  NAND2_X1 _221_ (
    .A1(clk_div[6]),
    .A2(_089_),
    .ZN(_090_)
  );
  XOR2_X1 _222_ (
    .A(clk_div[6]),
    .B(_089_),
    .Z(_001_[6])
  );
  XNOR2_X1 _223_ (
    .A(clk_div[5]),
    .B(_088_),
    .ZN(_001_[5])
  );
  XNOR2_X1 _224_ (
    .A(clk_div[4]),
    .B(_087_),
    .ZN(_001_[4])
  );
  XNOR2_X1 _225_ (
    .A(clk_div[3]),
    .B(_086_),
    .ZN(_001_[3])
  );
  XOR2_X1 _226_ (
    .A(clk_div[2]),
    .B(_085_),
    .Z(_001_[2])
  );
  AOI21_X1 _227_ (
    .A(clk_div[1]),
    .B1(clk_div[0]),
    .B2(_068_),
    .ZN(_091_)
  );
  AOI211_X1 _228_ (
    .A(_085_),
    .B(_091_),
    .C1(_078_),
    .C2(_079_),
    .ZN(_001_[1])
  );
  XNOR2_X1 _229_ (
    .A(_060_),
    .B(_068_),
    .ZN(_001_[0])
  );
  MUX2_X1 _230_ (
    .A(data_out[15]),
    .B(rx_reg[15]),
    .S(_077_),
    .Z(_016_)
  );
  OAI21_X1 _231_ (
    .A(_076_),
    .B1(_069_),
    .B2(_064_),
    .ZN(_002_)
  );
  MUX2_X1 _232_ (
    .A(_009_),
    .B(sclk),
    .S(_074_),
    .Z(_005_)
  );
  MUX2_X1 _233_ (
    .A(shift_reg[16]),
    .B(mosi),
    .S(_084_),
    .Z(_003_)
  );
  OAI21_X1 _234_ (
    .A(_076_),
    .B1(_068_),
    .B2(_065_),
    .ZN(_007_)
  );
  XOR2_X1 _235_ (
    .A(bit_cnt[4]),
    .B(_083_),
    .Z(_000_[4])
  );
  MUX2_X1 _236_ (
    .A(shift_reg[15]),
    .B(shift_reg[16]),
    .S(_084_),
    .Z(_006_[16])
  );
  MUX2_X1 _237_ (
    .A(rx_reg[14]),
    .B(rx_reg[15]),
    .S(_075_),
    .Z(_004_[15])
  );
  XNOR2_X1 _238_ (
    .A(clk_div[7]),
    .B(_090_),
    .ZN(_001_[7])
  );
  INV_X1 _239_ (
    .A(rst),
    .ZN(_027_)
  );
  INV_X1 _240_ (
    .A(rst),
    .ZN(_028_)
  );
  INV_X1 _241_ (
    .A(rst),
    .ZN(_029_)
  );
  INV_X1 _242_ (
    .A(rst),
    .ZN(_030_)
  );
  INV_X1 _243_ (
    .A(rst),
    .ZN(_031_)
  );
  INV_X1 _244_ (
    .A(rst),
    .ZN(_032_)
  );
  INV_X1 _245_ (
    .A(rst),
    .ZN(_033_)
  );
  INV_X1 _246_ (
    .A(rst),
    .ZN(_034_)
  );
  INV_X1 _247_ (
    .A(rst),
    .ZN(_035_)
  );
  INV_X1 _248_ (
    .A(rst),
    .ZN(_036_)
  );
  INV_X1 _249_ (
    .A(rst),
    .ZN(_037_)
  );
  INV_X1 _250_ (
    .A(rst),
    .ZN(_038_)
  );
  INV_X1 _251_ (
    .A(rst),
    .ZN(_039_)
  );
  INV_X1 _252_ (
    .A(rst),
    .ZN(_040_)
  );
  INV_X1 _253_ (
    .A(rst),
    .ZN(_041_)
  );
  INV_X1 _254_ (
    .A(rst),
    .ZN(_042_)
  );
  INV_X1 _255_ (
    .A(rst),
    .ZN(_043_)
  );
  INV_X1 _256_ (
    .A(rst),
    .ZN(_044_)
  );
  INV_X1 _257_ (
    .A(rst),
    .ZN(_045_)
  );
  INV_X1 _258_ (
    .A(rst),
    .ZN(_046_)
  );
  INV_X1 _259_ (
    .A(rst),
    .ZN(_047_)
  );
  INV_X1 _260_ (
    .A(rst),
    .ZN(_048_)
  );
  INV_X1 _261_ (
    .A(rst),
    .ZN(_049_)
  );
  INV_X1 _262_ (
    .A(rst),
    .ZN(_050_)
  );
  INV_X1 _263_ (
    .A(rst),
    .ZN(_051_)
  );
  INV_X1 _264_ (
    .A(rst),
    .ZN(_052_)
  );
  INV_X1 _265_ (
    .A(rst),
    .ZN(_053_)
  );
  INV_X1 _266_ (
    .A(rst),
    .ZN(_054_)
  );
  INV_X1 _267_ (
    .A(rst),
    .ZN(_055_)
  );
  INV_X1 _268_ (
    .A(rst),
    .ZN(_056_)
  );
  INV_X1 _269_ (
    .A(rst),
    .ZN(_057_)
  );
  INV_X1 _270_ (
    .A(rst),
    .ZN(_058_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _271_ (
    .CK(clk),
    .D(_002_),
    .Q(done),
    .QN(_008_),
    .RN(_057_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _272_ (
    .CK(clk),
    .D(_005_),
    .Q(sclk),
    .QN(_009_),
    .RN(_056_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _273_ (
    .CK(clk),
    .D(_003_),
    .Q(mosi),
    .QN(_095_),
    .RN(_054_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFS_X1 _274_ (
    .CK(clk),
    .D(_007_),
    .Q(ss),
    .QN(_097_),
    .SN(_052_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFF_X1 _275_ (
    .CK(clk),
    .D(_010_),
    .Q(data_out[0]),
    .QN(_098_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFF_X1 _276_ (
    .CK(clk),
    .D(_017_),
    .Q(data_out[1]),
    .QN(_138_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFF_X1 _277_ (
    .CK(clk),
    .D(_018_),
    .Q(data_out[2]),
    .QN(_137_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFF_X1 _278_ (
    .CK(clk),
    .D(_019_),
    .Q(data_out[3]),
    .QN(_136_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFF_X1 _279_ (
    .CK(clk),
    .D(_020_),
    .Q(data_out[4]),
    .QN(_135_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFF_X1 _280_ (
    .CK(clk),
    .D(_021_),
    .Q(data_out[5]),
    .QN(_134_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFF_X1 _281_ (
    .CK(clk),
    .D(_022_),
    .Q(data_out[6]),
    .QN(_133_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFF_X1 _282_ (
    .CK(clk),
    .D(_023_),
    .Q(data_out[7]),
    .QN(_132_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFF_X1 _283_ (
    .CK(clk),
    .D(_024_),
    .Q(data_out[8]),
    .QN(_131_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFF_X1 _284_ (
    .CK(clk),
    .D(_025_),
    .Q(data_out[9]),
    .QN(_130_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFF_X1 _285_ (
    .CK(clk),
    .D(_011_),
    .Q(data_out[10]),
    .QN(_129_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFF_X1 _286_ (
    .CK(clk),
    .D(_012_),
    .Q(data_out[11]),
    .QN(_128_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFF_X1 _287_ (
    .CK(clk),
    .D(_013_),
    .Q(data_out[12]),
    .QN(_127_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFF_X1 _288_ (
    .CK(clk),
    .D(_014_),
    .Q(data_out[13]),
    .QN(_126_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFF_X1 _289_ (
    .CK(clk),
    .D(_015_),
    .Q(data_out[14]),
    .QN(_125_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFF_X1 _290_ (
    .CK(clk),
    .D(_016_),
    .Q(data_out[15]),
    .QN(_093_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _291_ (
    .CK(clk),
    .D(_000_[0]),
    .Q(bit_cnt[0]),
    .QN(_124_),
    .RN(_051_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _292_ (
    .CK(clk),
    .D(_000_[1]),
    .Q(bit_cnt[1]),
    .QN(_099_),
    .RN(_050_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _293_ (
    .CK(clk),
    .D(_000_[2]),
    .Q(bit_cnt[2]),
    .QN(_100_),
    .RN(_049_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _294_ (
    .CK(clk),
    .D(_000_[3]),
    .Q(bit_cnt[3]),
    .QN(_101_),
    .RN(_048_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _295_ (
    .CK(clk),
    .D(_000_[4]),
    .Q(bit_cnt[4]),
    .QN(_096_),
    .RN(_053_)
  );
  (* src = "Master.v:43.5-81.8" *)
  always @(posedge clk, posedge rst)
    if (rst) shift_reg[0] <= data_in[0];
    else shift_reg[0] <= _006_[0];
  (* src = "Master.v:43.5-81.8" *)
  always @(posedge clk, posedge rst)
    if (rst) shift_reg[1] <= data_in[1];
    else shift_reg[1] <= _006_[1];
  (* src = "Master.v:43.5-81.8" *)
  always @(posedge clk, posedge rst)
    if (rst) shift_reg[2] <= data_in[2];
    else shift_reg[2] <= _006_[2];
  (* src = "Master.v:43.5-81.8" *)
  always @(posedge clk, posedge rst)
    if (rst) shift_reg[3] <= data_in[3];
    else shift_reg[3] <= _006_[3];
  (* src = "Master.v:43.5-81.8" *)
  always @(posedge clk, posedge rst)
    if (rst) shift_reg[4] <= data_in[4];
    else shift_reg[4] <= _006_[4];
  (* src = "Master.v:43.5-81.8" *)
  always @(posedge clk, posedge rst)
    if (rst) shift_reg[5] <= data_in[5];
    else shift_reg[5] <= _006_[5];
  (* src = "Master.v:43.5-81.8" *)
  always @(posedge clk, posedge rst)
    if (rst) shift_reg[6] <= data_in[6];
    else shift_reg[6] <= _006_[6];
  (* src = "Master.v:43.5-81.8" *)
  always @(posedge clk, posedge rst)
    if (rst) shift_reg[7] <= data_in[7];
    else shift_reg[7] <= _006_[7];
  (* src = "Master.v:43.5-81.8" *)
  always @(posedge clk, posedge rst)
    if (rst) shift_reg[8] <= data_in[8];
    else shift_reg[8] <= _006_[8];
  (* src = "Master.v:43.5-81.8" *)
  always @(posedge clk, posedge rst)
    if (rst) shift_reg[9] <= data_in[9];
    else shift_reg[9] <= _006_[9];
  (* src = "Master.v:43.5-81.8" *)
  always @(posedge clk, posedge rst)
    if (rst) shift_reg[10] <= data_in[10];
    else shift_reg[10] <= _006_[10];
  (* src = "Master.v:43.5-81.8" *)
  always @(posedge clk, posedge rst)
    if (rst) shift_reg[11] <= data_in[11];
    else shift_reg[11] <= _006_[11];
  (* src = "Master.v:43.5-81.8" *)
  always @(posedge clk, posedge rst)
    if (rst) shift_reg[12] <= data_in[12];
    else shift_reg[12] <= _006_[12];
  (* src = "Master.v:43.5-81.8" *)
  always @(posedge clk, posedge rst)
    if (rst) shift_reg[13] <= data_in[13];
    else shift_reg[13] <= _006_[13];
  (* src = "Master.v:43.5-81.8" *)
  always @(posedge clk, posedge rst)
    if (rst) shift_reg[14] <= data_in[14];
    else shift_reg[14] <= _006_[14];
  (* src = "Master.v:43.5-81.8" *)
  always @(posedge clk, posedge rst)
    if (rst) shift_reg[15] <= data_in[15];
    else shift_reg[15] <= _006_[15];
  (* src = "Master.v:43.5-81.8" *)
  always @(posedge clk, posedge rst)
    if (rst) shift_reg[16] <= 1'h0;
    else shift_reg[16] <= _006_[16];
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _313_ (
    .CK(clk),
    .D(_004_[0]),
    .Q(rx_reg[0]),
    .QN(_102_),
    .RN(_047_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _314_ (
    .CK(clk),
    .D(_004_[1]),
    .Q(rx_reg[1]),
    .QN(_103_),
    .RN(_046_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _315_ (
    .CK(clk),
    .D(_004_[2]),
    .Q(rx_reg[2]),
    .QN(_104_),
    .RN(_045_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _316_ (
    .CK(clk),
    .D(_004_[3]),
    .Q(rx_reg[3]),
    .QN(_105_),
    .RN(_044_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _317_ (
    .CK(clk),
    .D(_004_[4]),
    .Q(rx_reg[4]),
    .QN(_106_),
    .RN(_043_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _318_ (
    .CK(clk),
    .D(_004_[5]),
    .Q(rx_reg[5]),
    .QN(_107_),
    .RN(_042_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _319_ (
    .CK(clk),
    .D(_004_[6]),
    .Q(rx_reg[6]),
    .QN(_108_),
    .RN(_041_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _320_ (
    .CK(clk),
    .D(_004_[7]),
    .Q(rx_reg[7]),
    .QN(_109_),
    .RN(_040_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _321_ (
    .CK(clk),
    .D(_004_[8]),
    .Q(rx_reg[8]),
    .QN(_110_),
    .RN(_039_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _322_ (
    .CK(clk),
    .D(_004_[9]),
    .Q(rx_reg[9]),
    .QN(_111_),
    .RN(_038_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _323_ (
    .CK(clk),
    .D(_004_[10]),
    .Q(rx_reg[10]),
    .QN(_112_),
    .RN(_037_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _324_ (
    .CK(clk),
    .D(_004_[11]),
    .Q(rx_reg[11]),
    .QN(_113_),
    .RN(_036_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _325_ (
    .CK(clk),
    .D(_004_[12]),
    .Q(rx_reg[12]),
    .QN(_114_),
    .RN(_035_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _326_ (
    .CK(clk),
    .D(_004_[13]),
    .Q(rx_reg[13]),
    .QN(_115_),
    .RN(_034_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _327_ (
    .CK(clk),
    .D(_004_[14]),
    .Q(rx_reg[14]),
    .QN(_116_),
    .RN(_033_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _328_ (
    .CK(clk),
    .D(_004_[15]),
    .Q(rx_reg[15]),
    .QN(_094_),
    .RN(_055_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _329_ (
    .CK(clk),
    .D(_001_[0]),
    .Q(clk_div[0]),
    .QN(_117_),
    .RN(_032_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _330_ (
    .CK(clk),
    .D(_001_[1]),
    .Q(clk_div[1]),
    .QN(_118_),
    .RN(_031_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _331_ (
    .CK(clk),
    .D(_001_[2]),
    .Q(clk_div[2]),
    .QN(_119_),
    .RN(_030_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _332_ (
    .CK(clk),
    .D(_001_[3]),
    .Q(clk_div[3]),
    .QN(_120_),
    .RN(_029_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _333_ (
    .CK(clk),
    .D(_001_[4]),
    .Q(clk_div[4]),
    .QN(_121_),
    .RN(_028_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _334_ (
    .CK(clk),
    .D(_001_[5]),
    .Q(clk_div[5]),
    .QN(_122_),
    .RN(_027_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _335_ (
    .CK(clk),
    .D(_001_[6]),
    .Q(clk_div[6]),
    .QN(_123_),
    .RN(_026_)
  );
  (* src = "Master.v:43.5-81.8" *)
  DFFR_X1 _336_ (
    .CK(clk),
    .D(_001_[7]),
    .Q(clk_div[7]),
    .QN(_092_),
    .RN(_058_)
  );
endmodule

(* src = "Slave.v:23.1-50.10" *)
module Slave(sclk, ss, mosi, miso, data_in, data_out);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  (* force_downto = 32'd1 *)
  (* src = "Slave.v:47.24-47.35|/nix/store/zxzmb2hdyjahy1lq6yglcx6sxy6zrddi-yosys-with-plugins/bin/../share/yosys/techmap.v:270.26-270.27" *)
  (* unused_bits = "4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _044_;
  (* src = "Slave.v:32.15-32.22" *)
  wire [3:0] bit_cnt;
  (* src = "Slave.v:28.23-28.30" *)
  input [15:0] data_in;
  wire [15:0] data_in;
  (* src = "Slave.v:29.23-29.31" *)
  output [15:0] data_out;
  reg [15:0] data_out;
  (* src = "Slave.v:27.16-27.20" *)
  output miso;
  wire miso;
  (* src = "Slave.v:26.16-26.20" *)
  input mosi;
  wire mosi;
  (* src = "Slave.v:24.16-24.20" *)
  input sclk;
  wire sclk;
  (* src = "Slave.v:33.16-33.25" *)
  reg [15:0] shift_reg;
  (* src = "Slave.v:34.16-34.26" *)
  wire [15:0] shift_reg2;
  (* src = "Slave.v:25.16-25.18" *)
  input ss;
  wire ss;
  INV_X1 _045_ (
    .A(bit_cnt[0]),
    .ZN(_044_[0])
  );
  INV_X1 _046_ (
    .A(ss),
    .ZN(_016_)
  );
  NAND2_X1 _047_ (
    .A1(bit_cnt[1]),
    .A2(bit_cnt[0]),
    .ZN(_021_)
  );
  NAND3_X1 _048_ (
    .A1(bit_cnt[2]),
    .A2(bit_cnt[1]),
    .A3(bit_cnt[0]),
    .ZN(_022_)
  );
  XNOR2_X1 _049_ (
    .A(bit_cnt[3]),
    .B(_022_),
    .ZN(_044_[3])
  );
  XNOR2_X1 _050_ (
    .A(bit_cnt[2]),
    .B(_021_),
    .ZN(_044_[2])
  );
  XOR2_X1 _051_ (
    .A(bit_cnt[1]),
    .B(bit_cnt[0]),
    .Z(_044_[1])
  );
  MUX2_X1 _052_ (
    .A(shift_reg2[13]),
    .B(shift_reg2[14]),
    .S(ss),
    .Z(_005_)
  );
  MUX2_X1 _053_ (
    .A(shift_reg2[12]),
    .B(shift_reg2[13]),
    .S(ss),
    .Z(_004_)
  );
  MUX2_X1 _054_ (
    .A(shift_reg2[11]),
    .B(shift_reg2[12]),
    .S(ss),
    .Z(_003_)
  );
  MUX2_X1 _055_ (
    .A(shift_reg2[10]),
    .B(shift_reg2[11]),
    .S(ss),
    .Z(_002_)
  );
  MUX2_X1 _056_ (
    .A(shift_reg2[9]),
    .B(shift_reg2[10]),
    .S(ss),
    .Z(_001_)
  );
  MUX2_X1 _057_ (
    .A(shift_reg2[8]),
    .B(shift_reg2[9]),
    .S(ss),
    .Z(_015_)
  );
  MUX2_X1 _058_ (
    .A(shift_reg2[7]),
    .B(shift_reg2[8]),
    .S(ss),
    .Z(_014_)
  );
  MUX2_X1 _059_ (
    .A(shift_reg2[6]),
    .B(shift_reg2[7]),
    .S(ss),
    .Z(_013_)
  );
  MUX2_X1 _060_ (
    .A(shift_reg2[5]),
    .B(shift_reg2[6]),
    .S(ss),
    .Z(_012_)
  );
  MUX2_X1 _061_ (
    .A(shift_reg2[4]),
    .B(shift_reg2[5]),
    .S(ss),
    .Z(_011_)
  );
  MUX2_X1 _062_ (
    .A(shift_reg2[3]),
    .B(shift_reg2[4]),
    .S(ss),
    .Z(_010_)
  );
  MUX2_X1 _063_ (
    .A(shift_reg2[2]),
    .B(shift_reg2[3]),
    .S(ss),
    .Z(_009_)
  );
  MUX2_X1 _064_ (
    .A(shift_reg2[1]),
    .B(shift_reg2[2]),
    .S(ss),
    .Z(_008_)
  );
  MUX2_X1 _065_ (
    .A(shift_reg2[0]),
    .B(shift_reg2[1]),
    .S(ss),
    .Z(_007_)
  );
  MUX2_X1 _066_ (
    .A(mosi),
    .B(shift_reg2[0]),
    .S(ss),
    .Z(_000_)
  );
  MUX2_X1 _067_ (
    .A(shift_reg2[14]),
    .B(shift_reg2[15]),
    .S(ss),
    .Z(_006_)
  );
  INV_X1 _068_ (
    .A(ss),
    .ZN(_017_)
  );
  INV_X1 _069_ (
    .A(ss),
    .ZN(_018_)
  );
  INV_X1 _070_ (
    .A(ss),
    .ZN(_019_)
  );
  INV_X1 _071_ (
    .A(ss),
    .ZN(_020_)
  );
  (* src = "Slave.v:35.5-49.8" *)
  DFFR_X1 _072_ (
    .CK(sclk),
    .D(shift_reg[15]),
    .Q(miso),
    .QN(_043_),
    .RN(_020_)
  );
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) data_out[0] <= shift_reg2[0];
    else data_out[0] <= data_out[0];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) data_out[1] <= shift_reg2[1];
    else data_out[1] <= data_out[1];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) data_out[2] <= shift_reg2[2];
    else data_out[2] <= data_out[2];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) data_out[3] <= shift_reg2[3];
    else data_out[3] <= data_out[3];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) data_out[4] <= shift_reg2[4];
    else data_out[4] <= data_out[4];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) data_out[5] <= shift_reg2[5];
    else data_out[5] <= data_out[5];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) data_out[6] <= shift_reg2[6];
    else data_out[6] <= data_out[6];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) data_out[7] <= shift_reg2[7];
    else data_out[7] <= data_out[7];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) data_out[8] <= shift_reg2[8];
    else data_out[8] <= data_out[8];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) data_out[9] <= shift_reg2[9];
    else data_out[9] <= data_out[9];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) data_out[10] <= shift_reg2[10];
    else data_out[10] <= data_out[10];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) data_out[11] <= shift_reg2[11];
    else data_out[11] <= data_out[11];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) data_out[12] <= shift_reg2[12];
    else data_out[12] <= data_out[12];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) data_out[13] <= shift_reg2[13];
    else data_out[13] <= data_out[13];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) data_out[14] <= shift_reg2[14];
    else data_out[14] <= data_out[14];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) data_out[15] <= shift_reg2[15];
    else data_out[15] <= data_out[15];
  (* src = "Slave.v:35.5-49.8" *)
  DFFR_X1 _089_ (
    .CK(sclk),
    .D(_044_[0]),
    .Q(bit_cnt[0]),
    .QN(_025_),
    .RN(_018_)
  );
  (* src = "Slave.v:35.5-49.8" *)
  DFFR_X1 _090_ (
    .CK(sclk),
    .D(_044_[1]),
    .Q(bit_cnt[1]),
    .QN(_026_),
    .RN(_017_)
  );
  (* src = "Slave.v:35.5-49.8" *)
  DFFR_X1 _091_ (
    .CK(sclk),
    .D(_044_[2]),
    .Q(bit_cnt[2]),
    .QN(_027_),
    .RN(_016_)
  );
  (* src = "Slave.v:35.5-49.8" *)
  DFFR_X1 _092_ (
    .CK(sclk),
    .D(_044_[3]),
    .Q(bit_cnt[3]),
    .QN(_024_),
    .RN(_019_)
  );
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) shift_reg[0] <= data_in[0];
    else shift_reg[0] <= 1'h0;
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) shift_reg[1] <= data_in[1];
    else shift_reg[1] <= shift_reg[0];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) shift_reg[2] <= data_in[2];
    else shift_reg[2] <= shift_reg[1];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) shift_reg[3] <= data_in[3];
    else shift_reg[3] <= shift_reg[2];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) shift_reg[4] <= data_in[4];
    else shift_reg[4] <= shift_reg[3];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) shift_reg[5] <= data_in[5];
    else shift_reg[5] <= shift_reg[4];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) shift_reg[6] <= data_in[6];
    else shift_reg[6] <= shift_reg[5];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) shift_reg[7] <= data_in[7];
    else shift_reg[7] <= shift_reg[6];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) shift_reg[8] <= data_in[8];
    else shift_reg[8] <= shift_reg[7];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) shift_reg[9] <= data_in[9];
    else shift_reg[9] <= shift_reg[8];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) shift_reg[10] <= data_in[10];
    else shift_reg[10] <= shift_reg[9];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) shift_reg[11] <= data_in[11];
    else shift_reg[11] <= shift_reg[10];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) shift_reg[12] <= data_in[12];
    else shift_reg[12] <= shift_reg[11];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) shift_reg[13] <= data_in[13];
    else shift_reg[13] <= shift_reg[12];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) shift_reg[14] <= data_in[14];
    else shift_reg[14] <= shift_reg[13];
  (* src = "Slave.v:35.5-49.8" *)
  always @(posedge sclk, posedge ss)
    if (ss) shift_reg[15] <= data_in[15];
    else shift_reg[15] <= shift_reg[14];
  (* src = "Slave.v:35.5-49.8" *)
  DFF_X1 _109_ (
    .CK(sclk),
    .D(_000_),
    .Q(shift_reg2[0]),
    .QN(_028_)
  );
  (* src = "Slave.v:35.5-49.8" *)
  DFF_X1 _110_ (
    .CK(sclk),
    .D(_007_),
    .Q(shift_reg2[1]),
    .QN(_042_)
  );
  (* src = "Slave.v:35.5-49.8" *)
  DFF_X1 _111_ (
    .CK(sclk),
    .D(_008_),
    .Q(shift_reg2[2]),
    .QN(_041_)
  );
  (* src = "Slave.v:35.5-49.8" *)
  DFF_X1 _112_ (
    .CK(sclk),
    .D(_009_),
    .Q(shift_reg2[3]),
    .QN(_040_)
  );
  (* src = "Slave.v:35.5-49.8" *)
  DFF_X1 _113_ (
    .CK(sclk),
    .D(_010_),
    .Q(shift_reg2[4]),
    .QN(_039_)
  );
  (* src = "Slave.v:35.5-49.8" *)
  DFF_X1 _114_ (
    .CK(sclk),
    .D(_011_),
    .Q(shift_reg2[5]),
    .QN(_038_)
  );
  (* src = "Slave.v:35.5-49.8" *)
  DFF_X1 _115_ (
    .CK(sclk),
    .D(_012_),
    .Q(shift_reg2[6]),
    .QN(_037_)
  );
  (* src = "Slave.v:35.5-49.8" *)
  DFF_X1 _116_ (
    .CK(sclk),
    .D(_013_),
    .Q(shift_reg2[7]),
    .QN(_036_)
  );
  (* src = "Slave.v:35.5-49.8" *)
  DFF_X1 _117_ (
    .CK(sclk),
    .D(_014_),
    .Q(shift_reg2[8]),
    .QN(_035_)
  );
  (* src = "Slave.v:35.5-49.8" *)
  DFF_X1 _118_ (
    .CK(sclk),
    .D(_015_),
    .Q(shift_reg2[9]),
    .QN(_034_)
  );
  (* src = "Slave.v:35.5-49.8" *)
  DFF_X1 _119_ (
    .CK(sclk),
    .D(_001_),
    .Q(shift_reg2[10]),
    .QN(_033_)
  );
  (* src = "Slave.v:35.5-49.8" *)
  DFF_X1 _120_ (
    .CK(sclk),
    .D(_002_),
    .Q(shift_reg2[11]),
    .QN(_032_)
  );
  (* src = "Slave.v:35.5-49.8" *)
  DFF_X1 _121_ (
    .CK(sclk),
    .D(_003_),
    .Q(shift_reg2[12]),
    .QN(_031_)
  );
  (* src = "Slave.v:35.5-49.8" *)
  DFF_X1 _122_ (
    .CK(sclk),
    .D(_004_),
    .Q(shift_reg2[13]),
    .QN(_030_)
  );
  (* src = "Slave.v:35.5-49.8" *)
  DFF_X1 _123_ (
    .CK(sclk),
    .D(_005_),
    .Q(shift_reg2[14]),
    .QN(_029_)
  );
  (* src = "Slave.v:35.5-49.8" *)
  DFF_X1 _124_ (
    .CK(sclk),
    .D(_006_),
    .Q(shift_reg2[15]),
    .QN(_023_)
  );
endmodule

(* top =  1  *)
(* src = "top_spi.v:1.1-39.10" *)
module top_spi(clk, rst, start, master_data_in, slave_data_in, master_data_out, slave_data_out, done);
  (* src = "top_spi.v:2.16-2.19" *)
  input clk;
  wire clk;
  (* src = "top_spi.v:9.17-9.21" *)
  output done;
  wire done;
  (* src = "top_spi.v:5.23-5.37" *)
  input [15:0] master_data_in;
  wire [15:0] master_data_in;
  (* src = "top_spi.v:7.24-7.39" *)
  output [15:0] master_data_out;
  wire [15:0] master_data_out;
  (* src = "top_spi.v:14.10-14.14" *)
  wire miso;
  (* src = "top_spi.v:13.10-13.14" *)
  wire mosi;
  (* src = "top_spi.v:3.16-3.19" *)
  input rst;
  wire rst;
  (* src = "top_spi.v:12.10-12.14" *)
  wire sclk;
  (* src = "top_spi.v:6.23-6.36" *)
  input [15:0] slave_data_in;
  wire [15:0] slave_data_in;
  (* src = "top_spi.v:8.24-8.38" *)
  output [15:0] slave_data_out;
  wire [15:0] slave_data_out;
  (* src = "top_spi.v:15.10-15.12" *)
  wire ss;
  (* src = "top_spi.v:4.16-4.21" *)
  input start;
  wire start;
  (* module_not_derived = 32'd1 *)
  (* src = "top_spi.v:17.12-28.6" *)
  Master master (
    .clk(clk),
    .data_in(master_data_in),
    .data_out(master_data_out),
    .done(done),
    .miso(miso),
    .mosi(mosi),
    .rst(rst),
    .sclk(sclk),
    .ss(ss),
    .start(start)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "top_spi.v:30.11-37.6" *)
  Slave slave (
    .data_in(slave_data_in),
    .data_out(slave_data_out),
    .miso(miso),
    .mosi(mosi),
    .sclk(sclk),
    .ss(ss)
  );
endmodule
